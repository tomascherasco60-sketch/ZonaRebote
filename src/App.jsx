import './App.css';
import { useState, useEffect } from 'react';
import { db } from './config/firebase';
import { collection, addDoc, serverTimestamp, doc, setDoc, increment, onSnapshot, updateDoc } from 'firebase/firestore';
import Header from './components/Header.jsx';
import Hero from './components/Hero.jsx';
import ProductGrid from './components/ProductGrid.jsx';
import Features from './components/Featuress.jsx';
import FAQ from './components/FAQ.jsx';
import Footer from './components/Footer.jsx';
import CartModal from './components/CartModal.jsx';
// remove local products import - we'll load products from Firestore
// consolidated firestore imports above
import Promo from './components/Promo.jsx';

export default function App() {
Â  const [cart, setCart] = useState([]);
Â  const [cartOpen, setCartOpen] = useState(false);
Â  const [showFrame, setShowFrame] = useState(false);
Â  const [lastOrderTotal, setLastOrderTotal] = useState(null);
Â  const alias = 'tomas.799.estimo.mp';
Â  const [stockMap, setStockMap] = useState({});
Â  const [products, setProducts] = useState([]);
Â  const [loadingProducts, setLoadingProducts] = useState(true);

  // --- NUEVO: Estado para el cupÃ³n ---
  const [couponCode, setCouponCode] = useState("");
  const [discountApplied, setDiscountApplied] = useState(false);
  const DISCOUNT_CODE = 'Expodescuento'; // Nombre del cupÃ³n
  const DISCOUNT_RATE = 0.10; // 10%

Â  // --- NEW: disable any quick/dev login in production ---
Â  const DISABLE_QUICK_DEV = true;

Â  useEffect(() => {
Â  	if (DISABLE_QUICK_DEV && process.env.NODE_ENV === 'production') {
Â  	  // remove any leftover quick login button injected by components (safety net)
Â  	  const el = document.getElementById('quick-dev-button');
Â  	  if (el) el.remove();
Â  	  // if you use other ids/classes for the quick button, add them here
Â  	}
Â  }, []);

Â  // subscribe to products collection to build a map { name: { id, stock } }
Â  useEffect(() => {
Â  	const ref = collection(db, 'products');
Â  	const unsub = onSnapshot(ref, snap => {
Â  	  const map = {};
Â  	  const items = [];
Â  	  snap.forEach(d => {
Â  		const data = d.data();
Â  		const meta = { id: d.id, stock: data.stock || {} };
Â  		if (data.name) map[data.name] = meta;
Â  		if (data.image) {
Â  		  try {
Â  			const parts = data.image.split('/');
Â  			const base = parts[parts.length - 1];
Â  			map[base] = meta;
Â  			map[data.image] = meta;
Â  		  } catch (e) {
Â  			map[data.image] = meta;
Â  		  }
Â  		}
Â  		// push full product object for ProductGrid (include id)
Â  		items.push({ id: d.id, ...data });
Â  	  });
Â  	  setProducts(items);
Â  	  setLoadingProducts(false);
Â  	  setStockMap(map);
Â  	}, err => console.error('Error listening products', err));
Â  	return () => unsub();
Â  }, []);

  // --- NUEVO: Resetear cupÃ³n si el carrito se vacÃ­a ---
  useEffect(() => {
	if (cart.length === 0) {
	  setDiscountApplied(false);
	  setCouponCode("");
	}
  }, [cart.length]);

Â  const addToCart = (product) => {
Â  	setCart((prev) => [...prev, product]);
Â  };

Â  const updateCartItem = (index, updatedItem) => {
Â  	setCart((prev) => prev.map((it, i) => (i === index ? { ...it, ...updatedItem } : it)));
Â  }

Â  const removeFromCart = (index) => {
Â  	setCart(cart.filter((_, i) => i !== index));
Â  };

  // --- NUEVO: LÃ³gica para aplicar el cupÃ³n ---
  const applyCoupon = () => {
	if (couponCode.trim().toLowerCase() === DISCOUNT_CODE.toLowerCase()) {
	  setDiscountApplied(true);
	  alert('Â¡CupÃ³n "Expodescuento" aplicado! TenÃ©s un 10% de descuento.');
	} else {
	  setDiscountApplied(false);
	  alert('El cupÃ³n ingresado no es vÃ¡lido.');
	}
  };
  
  // --- NUEVO: Calcular subtotal, descuento y total ---
  const subtotal = cart.reduce((sum, item) => sum + (typeof item.price === 'number' ? item.price : 0), 0);
  const discount = discountApplied ? subtotal * DISCOUNT_RATE : 0;
  const total = subtotal - discount; // Este 'total' ahora incluye el descuento

Â  const finalizePurchase = async () => {
Â  	// Build order payload from cart
Â  	const items = cart.map(it => ({
Â  	  name: it.name || 'Item',
Â  	  price: typeof it.price === 'number' ? it.price : Number(it.price) || 0,
Â  	  size: it.size || null,
Â  	  quantity: it.quantity || 1,
Â  	  image: it.image || null,
Â  	}));

Â  	const order = {
Â  	  items,
	  // --- NUEVO: Guardar info del descuento en la orden ---
	  subtotal: subtotal || 0,
	  discount: discount || 0,
	  couponUsed: discountApplied ? couponCode.trim() : null,
Â  	  total: total || 0, // 'total' ya estÃ¡ descontado
Â  	  status: 'pending',
Â  	  date: serverTimestamp(),
Â  	  customer: null,
Â  	};

Â  	try {
Â  	  // Save order to Firestore
Â  	  const ordersRef = collection(db, 'orders');
Â  	  await addDoc(ordersRef, order);

Â  	  // Decrement stock for each item in Firestore using stockMap to find product id by name
Â  	  try {
Â  		for (const it of items) {
Â  		  const meta = stockMap[it.name];
Â  		  if (!meta || !meta.id) continue;
Â  		  const pRef = doc(db, 'products', meta.id);
Â  		  const sizeKey = it.size || 'U';
Â  		  try {
Â  			await setDoc(pRef, { stock: { [sizeKey]: increment((it.quantity || 1) * -1) } }, { merge: true });
Â  		  } catch (e) {
Â  			console.warn('Fallo decrement stock atomico para', it.name, e);
Â  			try {
Â  			  // fallback: try updateDoc reading existing stock
Â  			  const newVal = (meta.stock && (meta.stock[sizeKey] || 0)) - (it.quantity || 1);
Â  			  await updateDoc(pRef, { [`stock.${sizeKey}`]: newVal });
Â  			} catch (e2) {
Â  			  console.warn('Fallback tambiÃ©n fallÃ³:', e2);
Â  			}
Â  		  }
Â  		}
Â  	  } catch (e) {
Â  		console.warn('Error al decrementar stock:', e);
Â  	  }

Â  	  // Update admin meta counters (create if missing)
Â  	  const metaRef = doc(db, 'admin_meta', 'stats');
Â  	  // Atomically increment totals and set lastSale timestamp (setDoc with merge accepts increment)
Â  	  await setDoc(metaRef, { totalSales: increment(1), totalRevenue: increment(order.total || 0), lastSale: serverTimestamp() }, { merge: true });

Â  	  // capture total for UI (so clearing cart doesn't zero the displayed total)
Â  	  setLastOrderTotal(order.total || 0);

Â  	  // Show confirmation frame and close/clear cart
Â  	  setShowFrame(true);
Â  	  setCart([]);
Â  	  setCartOpen(false);
	  // --- NUEVO: Resetear estado del cupÃ³n ---
	  setDiscountApplied(false);
	  setCouponCode("");
Â  	} catch (err) {
Â  	  console.error('Error saving order', err);
Â  	  alert('OcurriÃ³ un error al procesar la compra. Por favor, intentÃ¡ nuevamente.');
Â  	  // Even if saving failed, show frame so user sees alias; do not clear cart so they can retry
Â  	  setShowFrame(true);
Â  	}
Â  }

Â  // vacÃ­a el carrito y cierra el frame de compra
Â  const clearAndClose = () => {
Â  	setCart([]);
Â  	setShowFrame(false);
Â  	setCartOpen(false);
	// --- NUEVO: Resetear estado del cupÃ³n ---
	setDiscountApplied(false);
	setCouponCode("");
Â  };

  // 'total' ya se calcula arriba con el descuento

Â  return (
Â  	<>
Â  	  {/* Pass disableQuickDev so child components can hide any quick/dev-login UI */}
Â  	  <Header cartCount={cart.length} onToggleCart={() => setCartOpen(!cartOpen)} disableQuickDev={DISABLE_QUICK_DEV} />
Â  	  <Hero />

Â  <ProductGrid products={products} addToCart={addToCart} stockMap={stockMap} loading={loadingProducts} />
Â  	  <Promo addToCart={addToCart} />
Â  	  <Features />
Â  	  <FAQ />
Â  	  <Footer />

Â  	  <CartModal
Â  		isOpen={cartOpen}
Â  		onClose={() => setCartOpen(false)}
Â  		cart={cart}
Â  		removeFromCart={removeFromCart}
Â  		updateCart={updateCartItem}
		// --- NUEVO: Props para el cupÃ³n y totales ---
		subtotal={subtotal}
		discount={discount}
Â  		total={total} // Este es el total con descuento
		couponCode={couponCode}
		setCouponCode={setCouponCode}
		onApplyCoupon={applyCoupon}
		discountApplied={discountApplied}
		// ---
Â  		onFinalize={finalizePurchase}
Â  	  />

Â  	  {showFrame && (
Â  		<div className="purchase-frame" role="dialog" aria-modal="true">
Â  		  <div className="frame-card">
Â  			<h3>Gracias por tu compra ðŸŽ‰</h3>
Â  			<p>
Â  			  Alias: <strong>{alias}</strong>
Â  			</p>
Â  			<p>
			  {/* Esto ya funciona porque lastOrderTotal y total ya tienen el descuento */}
Â  			  Total de la compra: <strong>${((lastOrderTotal != null) ? lastOrderTotal : total).toLocaleString()}</strong>
Â  			</p>
Â  			<p>
Â  			  Nombre del titular:<strong>Tomas Federico Cherasco</strong> 
Â  			</p>

Â  			<div className="frame-actions">
Â  			  <button
Â  				className="modal-button modal-copy"
Â  				onClick={() => {
Â  				  navigator.clipboard.writeText(alias);
Â  				  alert('Alias copiado al portapapeles âœ…');
Â  				}}
Â  			  >
Â  				Copiar Alias
Â  			  </button>

Â  			  <button
Â  				className="modal-button modal-close"
Â  				onClick={() => {
Â  				  // al cerrar despuÃ©s de la compra, limpiamos el carrito
Â  				  clearAndClose();
Â  				}}
Â  			  >
Â  				Cerrar
Â  			  </button>
Â  			</div>
Â  		  </div>
Â  		</div>
Â  	  )}
Â  	</>
Â  )
}